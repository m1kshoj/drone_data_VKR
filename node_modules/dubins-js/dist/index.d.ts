interface Waypoint {
    x: number;
    y: number;
    psi: number;
}

declare const SEGMENT_TYPES: {
    readonly LEFT: 1;
    readonly STRAIGHT: 2;
    readonly RIGHT: 3;
};
declare class Dubins {
    segments: Segment[];
    turnRadius: number;
    constructor(segments: Segment[], turnRadius: number);
    private curves;
    static path(wpt1: Waypoint, wpt2: Waypoint, turnRadius: number): Dubins;
    get tprimeMax(): number;
    get length(): number;
    pointAt(pos: number): Waypoint;
    pointAtLength(length: number): Waypoint;
    toObject(): {
        segments: {
            type: 3 | 1 | 2;
            startPoint: Waypoint;
            turnRadius: number;
            tprimeMax: number;
            length: number;
            center: {
                x: number;
                y: number;
            };
            arcAngles: {
                start: number;
                end: number;
            } | undefined;
        }[];
        turnRadius: number;
        length: number;
        tprimeMax: number;
    };
}
declare class Segment {
    type: typeof SEGMENT_TYPES[keyof typeof SEGMENT_TYPES];
    startPoint: Waypoint;
    turnRadius: number;
    tprimeMax: number;
    constructor(type: typeof SEGMENT_TYPES[keyof typeof SEGMENT_TYPES], startPoint: Waypoint, turnRadius: number, tprimeMax: number);
    get length(): number;
    get center(): {
        x: number;
        y: number;
    };
    get arcAngles(): {
        start: number;
        end: number;
    } | undefined;
    pointAt(pos: number): Waypoint;
    pointAtLength(length: number): Waypoint;
    absolutePointAt(tprime: number): Waypoint;
    toObject(): {
        type: 3 | 1 | 2;
        startPoint: Waypoint;
        turnRadius: number;
        tprimeMax: number;
        length: number;
        center: {
            x: number;
            y: number;
        };
        arcAngles: {
            start: number;
            end: number;
        } | undefined;
    };
}

export { Dubins, SEGMENT_TYPES, Segment, Waypoint };
